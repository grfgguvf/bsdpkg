#!/bin/sh
###
### DFPkg
###
### Tested only on Fedora 11-rawhide (bash 3.2, ksh? 20080725, zsh 4.3.4), 
### currently.. Please test, mainly on DragonFly BSD
###

### Anticipated-to-be-distribution-customized variables:
df_log_dir=/var/log/ #DEFAULT#
df_run_dir=/var/run/ #DEFAULT#
### 

df_ver=0.2.10 ### This is dfpkg's version, not that of DragonFly








###

df_warn() {
 echo '/!\' "$@" 1>&2
}

df_info() {
 echo '{i}' "$@" 1>&2
}

df_get_ts() {
 true ### TODO: POSIX date(1) does not support neither %s nor %N
}

df_get_date() {
 date
}

df_get_platform() {
 platf="`uname`"
 case "$platf" in
  Linux|Hurd|FreeBSD) ### Always remember that things like Debian/kFreeBSD 
                      ### [debports] exist
   if [ -e /etc/fedora-release ]; then
    platf=yum
   elif [ -e /etc/debian-version ]; then ### This might supposedly fail on 
                                         ### >=etch installations
    platf=Debian
   fi
   ;;
 esac
 echo "$platf"
}

###

df_log_init() {
 if [ ! -e "$df_log_file" ]; then
  touch "$df_log_file"
 fi
}

df_log() {
 #touch "$df_log_file"
 echo "$@" >> "$df_log_file"
}

df_log_sep() {
 df_warn df_log_sep\(\) used
 true
}

df_log_date() {
 df_log Date: "`df_get_date`"
}

###

df_trans_log_init() {
 if [ ! -e "$df_trans_log_file" ]; then
  touch "$df_trans_log_file"
 fi
}

df_trans_log() {
 #touch "$df_trans_log_file"
 echo " $@" >> "$df_trans_log_file"
}

df_trans_log_sep() {
 df_warn df_trans_log_sep\(\) used
 true
}

df_trans_log_date() {
 df_trans_log Date: "`df_get_date`"
}

df_trans_log_commit() {
 cat "$df_trans_log_file" \
 | sed -e s/Install:/Installed:/g \
 | sed -e s/Uninstall:/Uninstalled:/g \
 | sed -e s/FullyUpgrade:/FullyUpgraded:/g \
 >> "$df_log_file"
}

###

lowlevel_DragonFly_install() {
 echo pkg_radd  "$@"
}

lowlevel_FreeBSD_install() {
 echo pkg_add -r "$@"
}

lowlevel_Debian_install() {
 echo aptitude update
 echo aptitude -yR install "$@"
}

lowlevel_yum_install() {
 echo yum -y install "$@"
}

###

lowlevel_DragonFly_uninstall() {
 echo pkg_delete -rR "$@"
}

lowlevel_FreeBSD_uninstall() {
 echo pkg_delete -r "$@"
}

lowlevel_Debian_uninstall() {
 echo aptitude -y remove "$@"
}

lowlevel_yum_uninstall() {
 echo yum -y remove "$@"
}

###

lowlevel_DragonFly_fullupgrade() {
 ### TODO: Upgrade the base-system, too
 df_warn The base-system upgrade is currently not implemented 
 echo pkg_radd -uu '\*' ### TODO: Does pkgsrc pkg_add 
                        ### support wildcards?
}

lowlevel_FreeBSD_fullupgrade() {
 echo freebsd-update fetch install
 echo portsnap -I fetch update ### TODO: portsnap extract DBD?
 ### TODO: Actually update packages (no standard way to do
 ### this on FreeBSD!!)
}

lowlevel_Debian_fullupgrade() {
 echo aptitude update
 echo aptitude -yR full-upgrade 
}

lowlevel_yum_fullupgrade() {
 echo yum -y upgrade
}

###

df_commit_reminder() {
 df_info Operation\(s\) added to transaction $df_tid, to run it execute:
 df_info " "dfpkg commit
}

df_install() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Install: "$pkg"
 done
 lowlevel_${df_platform}_install "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_uninstall() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Uninstall: "$pkg"
 done
 lowlevel_${df_platform}_uninstall "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_fullupgrade() {
 df_trans_log_date
 df_trans_log " "FullyUpgrade: \*
 lowlevel_${df_platform}_fullupgrade >> "$df_trans_file"
 df_commit_reminder
}

###

df_tid_init() {
 if [ ! -d "$df_trans_dir" ]; then
  mkdir -p "$df_trans_dir"
 fi
 if [ ! -e "$df_tid_file" ]; then
  echo 1 > "$df_tid_file"
 fi
}

df_get_tid() {
 cat "$df_tid_file"
}

df_new_tid() {
 echo $(($df_tid+1)) > "$df_tid_file"
 ### TODO: Update $df_tid
}

###

df_trans_init() {
 if [ ! -d "$df_trans_dir" ]; then
  mkdir -p "$df_trans_dir"
 fi
 if [ ! -e "$df_trans_file" ]; then
  touch "$df_trans_file"
 fi
}

df_trans_begin() {
 true ### TODO: Clone filesystem / Make snapshot / etc
}

df_trans_cleanup() {
 rm -f "$df_trans_log_file"
 touch "$df_trans_log_file" 
 rm -f "$df_trans_file"
 touch "$df_trans_file"
}

df_trans_end_ok() {
 true ### TODO: Promote clone / Remove snapshot / etc
}

df_trans_end_fail() {
 true ### TODO: Remove clone / Rollback to snapshot / etc
}

df_commit() {
 df_log_date
 df_log Beginning: Transaction $df_tid
 df_trans_begin
 sh -ex "$df_trans_file"
 if [ $? -ne 0 ]; then
  df_warn Part\(s\) of transaction $df_tid failed. Intent log follows:
  cat "$df_trans_log_file"
  df_log Failed: Transaction $df_tid
  df_trans_end_fail
 else
  df_trans_log_commit
  df_log Succeeded: Transaction $df_tid
  df_trans_end_ok
  df_info Transaction $df_tid succeeded
 fi
 df_trans_cleanup
}

df_cancel() {
 df_info Cancelled transaction $df_tid. Intent log follows:
 cat "$df_trans_log_file"
 df_trans_cleanup
}

###

df_platform="`df_get_platform`"

df_log_file="$df_log_dir"/dfpkg.log
df_log_init

df_trans_dir="$df_run_dir"/dfpkg/trans/
df_trans_file="$df_trans_dir"//curr.dftrans
df_trans_init

df_trans_log_file="$df_trans_dir"/curr.log
df_trans_log_init

df_tid_file="$df_trans_dir"/curr.dftid
df_tid_init
df_tid="`df_get_tid`"

case "$1" in
 add|install)
  shift
  df_install "$@"
  ;;
 add-now|install-now)
  shift
  df_install "$@"
  df_commit
  ;;
 update|upgrade)
  if [ $# -eq 1 ]; then
   df_fullupgrade 
  else
   shift
   df_upgrade "$@" ### TODO
  fi;
  ;;
 update-now|upgrade-now)
  if [ $# -eq 1 ]; then
   df_fullupgrade 
  else
   shift
   df_upgrade "$@" ### TODO
  fi
  df_commit
  ;;
 remove|erase|delete|uninstall)
  shift
  df_uninstall "$@"
  ;;
 remove-now|erase-now|delete-now|uninstall-now)
  shift
  df_uninstall "$@"
  df_commit
  ;;
 commit|run|execute|commit-now|run-now|execute-now)
  df_commit
  ;; 
 cancel|cancel-now)
  df_cancel
  ;;
 log|show-log|history|show-history)
  cat "$df_log_file"
  ;;
 trans|transaction|show-trans|show-transaction)
  df_info Intents of transaction ${df_tid}:
  cat "$df_trans_log_file"
  ;;
 help|--help|-?|get-help)
  echo DFPkg $df_ver usage:
  echo
  echo To upgrade the system:
  echo " "dfpkg upgrade
  echo To install packages and their dependencies:
  echo " "dfpkg install PACKAGE1 PACKAGE2 ...
  echo To uninstall packages, their no-longer-needed dependencies \(where 
  echo "    "supported\), and packages that depend on them:
  echo " "dfpkg uninstall PACKAGE1 PACKAGE2 ...
  echo
  echo NOTE: You have to actually run the transaction for the operations to 
  echo "    "be done:
  echo " "dfpkg commit
  echo NOTE: To cancel a transaction:
  echo " "dfpkg cancel
  echo To show the intents of the current transaction:
  echo " "dfpkg show-trans
  echo
  echo For immediate operations you can use the -now version of commands:
  echo " "dfpkg install-now PACKAGE1 PACKAGE2 ...
  echo
  ;;
 platf|platform|get-platform)
  echo Platform: "$df_platform"
  ;;
 version|--version|get-version)
  echo $df_ver
  ;;
esac

: end

