#!/bin/sh
###
### bsdpkg
###
### This file is in the Public Domain.
###
### Tested only on:
###  FreeBSD 7.1-RC1
###  Fedora 11-rawhide (bash 3.2, ksh 20080725, zsh 4.3.4)
### Please test, mainly on DragonFly and other BSDs. It's supposed to be
### portable to any UNIX.

### Anticipated-to-be-distribution-customized variables:
df_log_dir=/var/log/ #DEFAULT#
df_run_dir=/var/db/ #DEFAULT#
### 

df_ver=40 ### This is bsdpkg's version, not that of DragonFly (r0

###

df_warn() {
 echo '/!\' "$@" 1>&2
}

df_info() {
 echo '{i}' "$@" 1>&2
}

df_get_ts() {
 df_warn This function ain"'"t spos"'"d to be called
 true
}

df_get_date() {
 date
}

df_get_platform() {
 platf="`uname`"
 case "$platf" in
  Linux|Hurd|FreeBSD|SunOS)
      ### Always remember that things like Debian/kFreeBSD 
      ### or Nexenta exist
   if [ -e /etc/fedora-release ]; then
    platf=yum
   elif [ -e /etc/debian-version ]; then ### This might supposedly fail on 
                                         ### >=etch installations
    platf=Debian
   fi
   ;;
 esac
 echo "$platf"
}

###

df_db_dir_init() {
 if test ! -d "$df_db_dir"; then
  mkdir -p "$df_db_dir"
 fi
}

###

df_log_init() {
 if [ ! -e "$df_log_file" ]; then
  touch "$df_log_file"
 fi
}

df_log() {
 echo "$@" >> "$df_log_file"
}

df_log_sep() {
 df_warn df_log_sep\(\) used
 true
}

df_log_date() {
 df_log Date: "`df_get_date`"
}

###

df_trans_log_init() {
 if [ ! -e "$df_trans_log_file" ]; then
  touch "$df_trans_log_file"
 fi
}

df_trans_log() {
 echo " $@" >> "$df_trans_log_file"
}

df_trans_log_sep() {
 df_warn df_trans_log_sep\(\) used
 true
}

df_trans_log_date() {
 df_trans_log Date: "`df_get_date`"
}

df_trans_log_commit() {
 cat "$df_trans_log_file" \
 | sed -e s/Install:/Installed:/g \
 | sed -e s/Uninstall:/Uninstalled:/g \
 | sed -e s/FullyUpgrade:/FullyUpgraded:/g \
 >> "$df_log_file"
}

###

df_ver_file_update() {
 echo "$df_ver" > "$df_ver_file"
}

df_ver_file_init() {
 if test ! -e "$df_ver_file"; then
  df_ver_file_update
 fi
}

df_ver_getlast() {
 cat "$df_ver_file"
}

df_ver_handler() {
 last_ver="`df_ver_getlast`"
 if test "$last_ver" != "$df_ver"; then
  ### TODO: -lt, but that would need simple integer versions......
  df_warn Upgrading "$0" databases from version "$last_ver" to
  df_warn "    $df_ver" not implemented
  #df_ver_upgrade_${last_ver}_to_${df_ver}
  df_ver_file_update
 fi
}

###

lowlevel_DragonFly_install() {
 echo pkg_radd  "$@"
}

lowlevel_FreeBSD_install() {
 echo pkg_add -r "$@"
}

lowlevel_OpenBSD_install() {
 echo pkg_add -v "$@"
}

lowlevel_Debian_install() {
 echo aptitude update
 echo aptitude -yR install "$@"
}

lowlevel_yum_install() {
 echo yum -y install "$@"
}

lowlevel_SunOS_install() {
 echo pkg install "$@"
}

###

lowlevel_DragonFly_uninstall() {
 echo pkg_delete -rR "$@"
}

lowlevel_FreeBSD_uninstall() {
 echo pkg_delete -rv "$@"
}

lowlevel_OpenBSD_uninstall() {
 echo pkg_delete -v "$@" ### TODO: Remove orphans
                         ### Supposedly OBSD has support for this??
}

lowlevel_Debian_uninstall() {
 echo aptitude -y remove "$@"
}

lowlevel_yum_uninstall() {
 echo yum -y remove "$@"
}

lowlevel_SunOS_uninstall () {
 echo pkg uninstall "$@"
}

###

lowlevel_FreeBSD_portsnap_extract() {
 printf 'if [ ! -e '"$df_run_dir"'/dfpkg/done:portsnap_extract ]; then '
 printf  'portsnap fetch extract; '
 printf  'touch '"$df_run_dir"'/dfpkg/done:portsnap_extract; '
 printf 'fi\n'
}

lowlevel_FreeBSD_install_portupgrade() {
 printf 'if [ ! -e /usr/local/sbin/portupgrade ]; then '
 printf  'pkg_add -r portupgrade; '
 printf 'fi\n'
}

###

lowlevel_DragonFly_fullupgrade() {
 ### TODO: Upgrade the base-system, too
 df_warn The base-system upgrade is currently not implemented 
 echo pkg_radd -uu '\*' ### TODO: Does pkgsrc pkg_add 
                        ### support wildcards?
}

lowlevel_FreeBSD_fullupgrade() {
 echo freebsd-update fetch install
 lowlevel_FreeBSD_portsnap_extract
 echo portsnap -I fetch update
 lowlevel_FreeBSD_install_portupgrade
 echo pkgdb -Fa
 echo portupgrade -aPPR --batch
 echo pkgdb -Fa
}

lowlevel_OpenBSD_fullupgrade() {
 df_warn OpenBSD basesystem upgrade yet unimplemented ### TODO:
     ### No automated easy tool, but binary release upgrades
     ### are possible by extracting sets by hand... retro
 echo pkg_add -u
}

lowlevel_Debian_fullupgrade() {
 echo aptitude update
 echo aptitude -yR full-upgrade 
}

lowlevel_yum_fullupgrade() {
 echo yum -y upgrade
}

lowlevel_SunOS_fullupgrade() {
 echo pkg image-update
}

###

df_commit_reminder() {
 df_info Operation\(s\) added to transaction $df_tid, to run it execute:
 df_info " ""$0" commit
}

df_install() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Install: "$pkg"
 done
 lowlevel_${df_platform}_install "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_uninstall() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Uninstall: "$pkg"
 done
 lowlevel_${df_platform}_uninstall "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_fullupgrade() {
 df_trans_log_date
 df_trans_log " "FullyUpgrade: \*
 lowlevel_${df_platform}_fullupgrade >> "$df_trans_file"
 df_commit_reminder
}

###

df_tid_init() {
 if [ ! -d "$df_trans_dir" ]; then
  mkdir -p "$df_trans_dir"
 fi
 if [ ! -e "$df_tid_file" ]; then
  echo 1 > "$df_tid_file"
 fi
}

df_get_tid() {
 cat "$df_tid_file"
}

df_new_tid() {
 df_tid=$(($df_tid+1))
 echo $df_tid > "$df_tid_file"
}

###

df_trans_init() {
 if [ ! -d "$df_trans_dir" ]; then
  mkdir -p "$df_trans_dir"
 fi
 if [ ! -e "$df_trans_file" ]; then
  touch "$df_trans_file"
 fi
}

df_trans_begin() {
 cd "$df_trans_dir"
 ### TODO: Locking needed here (and in many other places I bet)
 mv "$df_trans_file" ${df_tid}.trans
 df_trans_file="$df_trans_dir/$df_tid.trans"
 mv "$df_trans_log_file" ${df_tid}.log
 df_trans_log_file="$df_trans_dir/$df_tid.log"
 ### TODO: Clone filesystem / Make snapshot / etc (maybe separate func)
}

df_trans_cleanup() {
 ### TODO: Orly?
 #rm -f "$df_trans_log_file"
 #touch "$df_trans_log_file" 
 #rm -f "$df_trans_file"
 #touch "$df_trans_file"
}

df_trans_end_ok() {
 true ### TODO: Promote clone / Remove snapshot / etc
 echo ok > "$df_trans_dir"/${df_tid}.stat
 df_new_tid
}

df_trans_end_fail() {
 true ### TODO: Remove clone / Rollback to snapshot / etc
 echo fail > "$df_trans_dir"/${df_tid}.stat
 df_new_tid
}

df_commit() {
 df_log_date
 df_log Beginning: Transaction $df_tid
 df_trans_begin
 sh -ex "$df_trans_file"
 if [ $? -ne 0 ]; then
  df_warn Part\(s\) of transaction $df_tid failed. Intent log follows:
  cat "$df_trans_log_file"
  df_log Failed: Transaction $df_tid
  df_trans_end_fail
 else
  df_trans_log_commit
  df_log Succeeded: Transaction $df_tid
  df_trans_end_ok
  df_info Transaction $df_tid succeeded
 fi
 df_trans_cleanup
}

df_cancel_trans() {
 df_trans_begin
 echo cancel > "$df_trans_dir"/${df_tid}.stat
}

df_cancel() {
 df_info Cancelled transaction $df_tid. Intent log follows:
 cat "$df_trans_log_file"
 df_cancel_trans
 df_trans_cleanup
 df_new_tid
}

###

df_platform="`df_get_platform`"

df_db_dir="$df_run_dir"/bsdpkg/
df_db_dir_init

df_ver_file="$df_db_dir"/last.ver
df_ver_file_init
df_ver_handler

df_log_file="$df_log_dir"/bsdpkg.log
df_log_init

df_trans_dir="$df_db_dir"/trans/

df_trans_file="$df_trans_dir"/next.trans
df_trans_init

df_trans_log_file="$df_trans_dir"/next.log
df_trans_log_init

df_tid_file="$df_trans_dir"/next.tid
df_tid_init
df_tid="`df_get_tid`"

case "$1" in
 add|install)
  shift
  df_install "$@"
  exit
  ;;
 add-now|install-now)
  shift
  df_install "$@"
  df_commit
  exit
  ;;
 update|upgrade)
  if [ $# -eq 1 ]; then
   df_fullupgrade 
  else
   shift
   df_upgrade "$@" ### TODO
  fi;
  exit
  ;;
 update-now|upgrade-now)
  if [ $# -eq 1 ]; then
   df_fullupgrade 
  else
   shift
   df_upgrade "$@" ### TODO
  fi
  df_commit
  exit
  ;;
 remove|erase|delete|uninstall)
  shift
  df_uninstall "$@"
  exit
  ;;
 remove-now|erase-now|delete-now|uninstall-now)
  shift
  df_uninstall "$@"
  df_commit
  exit
  ;;
 commit|run|execute|commit-now|run-now|execute-now)
  df_commit
  exit
  ;; 
 cancel|cancel-now)
  df_cancel
  exit
  ;;
 log|show-log|history|show-history)
  cat "$df_log_file"
  exit
  ;;
 trans|transaction|show-trans|show-transaction)
  df_info Intent log of transaction ${df_tid} follows:
  cat "$df_trans_log_file"
  exit
  ;;
 help|--help|-?|get-help)
  echo              "$0" $df_ver usage:
  echo      
  echo To upgrade the system:
  echo " ""$0" upgrade
  echo To install packages and their dependencies:
  echo " ""$0" install PACKAGE1 PACKAGE2 ...
  echo To uninstall packages, their no-longer-needed dependencies \(where 
  echo "    "supported\), and packages that depend on them:
  echo " ""$0" uninstall PACKAGE1 PACKAGE2 ...
  echo
  echo NOTE: You have to actually run the transaction for the operations to 
  echo "    "be done:
  echo " ""$0" commit
  echo NOTE: To cancel a transaction:
  echo " ""$0" cancel
  echo To show the intents of the current transaction:
  echo " ""$0" show-trans
  echo
  echo For immediate operations you can use the -now version of commands:
  echo " ""$0" install-now PACKAGE1 PACKAGE2 ...
  echo
  exit
  ;;
 platf|platform|get-platform)
  echo Platform: "$df_platform"
  exit
  ;;
 version|--version|get-version)
  echo $df_ver
  exit
  ;;
esac

df_warn Unknown command "$1"
exit 1

