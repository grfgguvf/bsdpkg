#!/bin/sh
###
### bsdpkg
###
### This file is in the Public Domain.
###
### Tested only on:
###  FreeBSD 7.1-RC1 [Vrooom]
###  Fedora 11-rawhide (bash 3.2, ksh 20080725, zsh 4.3.4)
### Please test, mainly on DragonFly and other BSDs. It's supposed to be
### portable to any UNIX.

### Anticipated-to-be-distribution-customized variables:
df_log_dir=/var/log/ #DEFAULT#
df_run_dir=/var/db/ #DEFAULT#
### 

df_ver=52 ### This is bsdpkg's version, not that of DragonFly

###

df_warn() {
 echo '/!\' "$@" 1>&2
}

df_info() {
 echo '(i)' "$@" 1>&2
}

df_get_date() {
 date
}

df_get_platform() {
 platf="`uname`"
 case "$platf" in
  Linux|Hurd|FreeBSD|SunOS)
      ### Always remember that things like Debian/kFreeBSD 
      ### or Nexenta exist
   if test -f /etc/fedora-release; then
    platf=yum
   elif test -f /etc/debian-version -o -f /etc/debian.version -o \
       -f /etc/debian_version -o -f /etc/debian-release -o \
       -f /etc/debian_release; then
    ### This might supposedly fail on >=Etch installations
    platf=Debian
   elif test -f /etc/SUSE-release -o -f /etc/SuSE-release; then
    platf=zyp
   fi
   ;;
 esac
 echo "$platf"
}

###

df_db_dir_init() {
 if test ! -d "$df_db_dir"; then
  mkdir -p "$df_db_dir"
  df_info Creating directory "$df_db_dir"
 fi
}

###

df_log_init() {
 if test ! -f "$df_log_file"; then
  touch "$df_log_file"
  df_info Creating log file "$df_log_file"
 fi
}

df_log() {
 echo "$@" >> "$df_log_file"
}

df_log_sep() {
 df_warn df_log_sep\(\) used
 true
}

df_log_date() {
 df_log Date: "`df_get_date`"
}

###

df_trans_log_init() {
 if test ! -f "$df_trans_log_file"; then
  touch "$df_trans_log_file"
 fi
}

df_trans_log() {
 echo " $@" >> "$df_trans_log_file"
}

df_trans_log_sep() {
 df_warn df_trans_log_sep\(\) used
 true
}

df_trans_log_date() {
 df_trans_log Date: "`df_get_date`"
}

df_trans_log_commit() {
 cat "$df_trans_log_file" \
 | sed -e s/Install:/Installed:/g \
 | sed -e s/Uninstall:/Uninstalled:/g \
 | sed -e s/FullyUpgrade:/FullyUpgraded:/g \
 | sed -e s/Upgrade:/Upgraded:/g \
 >> "$df_log_file"
}

###

df_ver_file_update() {
 echo "$df_ver" > "$df_ver_file"
}

df_ver_file_init() {
 if test ! -f "$df_ver_file"; then
  df_ver_file_update
  df_info Creating file "$df_ver_file"
 fi
}

df_ver_getlast() {
 cat "$df_ver_file"
}

###

df_ver_upgrade_40_to_41() {
 return 0
}

df_ver_upgrade() {
 if test $1 -eq 40 -a $2 -eq 41; then
  return 0
 elif test $2 -eq 50; then
  return 0
 elif test $2 -eq 51; then
  if test -f "$df_run_dir"/dfpkg/done:portsnap_extract; then
   mkdir -p "$df_db_dir"
   mv "$df_run_dir"/dfpkg/done:portsnap_extract "$df_db_dir"
  fi
  return 0
 elif test $2 -eq 52; then
  return 0
 fi
 return 1
}

###

df_ver_handler() {
 last_ver="`df_ver_getlast`"
 if test "$last_ver" -lt "$df_ver"; then
  df_ver_upgrade $last_ver $df_ver
  if test $? -ne 0; then
   df_warn Upgrading "$0" databases from version $last_ver to $df_ver is
   df_warn " "not implemented
  fi
  df_ver_file_update
 elif test $last_ver -gt $df_ver; then
  df_warn Downgrading "$0" databases \(from version $last_ver to ${df_ver}\)\?
  df_warn " "Well, that ain"'"t supported... Uncommitted transaction may be lost
 fi
}

###

lowlevel_FreeBSD_pkgpath() {
 echo export PACKAGESITE=ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/'"`uname -m`"'/packages-current/Latest/
}

###

lowlevel_DragonFly_install() {
 echo pkg_radd  "$@"
}

lowlevel_FreeBSD_install() {
 lowlevel_FreeBSD_pkgpath
 echo pkg_add -rv "$@"
}

lowlevel_OpenBSD_install() {
 echo pkg_add -v "$@"
}

lowlevel_Debian_install() {
 echo aptitude update
 echo aptitude -yR install "$@"
}

lowlevel_yum_install() {
 echo yum -y install "$@"
}

lowlevel_SunOS_install() {
 echo pkg install "$@"
}

lowlevel_zyp_install() {
 echo zypper install "$@"
}

###

lowlevel_DragonFly_uninstall() {
 echo pkg_delete -rR "$@"
}

lowlevel_FreeBSD_uninstall() {
 echo pkg_delete -rv "$@"
}

lowlevel_OpenBSD_uninstall() {
 echo pkg_delete -v "$@" ### TODO: Remove orphans
                         ### Supposedly OBSD has support for this??
}

lowlevel_Debian_uninstall() {
 echo aptitude -y remove "$@"
}

lowlevel_yum_uninstall() {
 echo yum -y remove "$@"
}

lowlevel_SunOS_uninstall () {
 echo pkg uninstall "$@"
}

lowlevel_zyp_uninstall() {
 echo zypper remove "$@"
}

###

lowlevel_FreeBSD_portsnap_extract() {
 printf 'if test ! -f '"$df_db_dir"'/done:portsnap_extract; then '
 printf  'portsnap fetch extract; '
 printf  'touch '"$df_db_dir"'/done:portsnap_extract; '
 printf 'fi\n'
}

lowlevel_FreeBSD_install_portupgrade() {
 printf 'if test ! -x /usr/local/sbin/portupgrade ]; then \n' 
 lowlevel_FreeBSD_install portuprade
 printf '\nfi\n'
}

###

lowlevel_FreeBSD_upgrade() {
 lowlevel_FreeBSD_pkgpath
 echo pkg_add -rvF "$@" ### TODO: May not work??
}

###

lowlevel_DragonFly_fullupgrade() {
 ### TODO: Upgrade the base-system, too
 df_warn The base-system upgrade is currently not implemented 
 echo pkg_radd -uu '\*' ### TODO: Does pkgsrc pkg_add 
                        ### support wildcards?
}

lowlevel_FreeBSD_fullupgrade() {
 echo freebsd-update fetch install
 lowlevel_FreeBSD_portsnap_extract
 echo portsnap -I fetch update
 lowlevel_FreeBSD_pkgpath
 lowlevel_FreeBSD_install_portupgrade ### TODO: Maybe portupgrade
  ### is not the best option
 echo pkgdb -Fa
 echo portupgrade -aPPR --batch
 echo pkgdb -Fa
}

lowlevel_OpenBSD_fullupgrade() {
 df_warn OpenBSD basesystem upgrade yet unimplemented ### TODO:
     ### No automated easy tool, but binary release upgrades
     ### are possible by extracting sets by hand... retro
 echo pkg_add -u
}

lowlevel_Debian_fullupgrade() {
 echo aptitude update
 echo aptitude -yR full-upgrade 
}

lowlevel_yum_fullupgrade() {
 echo yum -y upgrade
}

lowlevel_SunOS_fullupgrade() {
 ### TODO: Needs refresh?
 echo pkg image-update
}

lowlevel_zyp_fullupgrade() {
 ### TODO: Needs refresh?
 echo zypper --non-interactive update
 echo zypper --non-interactive dist-upgrade
}

###

df_commit_reminder() {
 df_info Operation\(s\) added to transaction $df_tid, to run it execute:
 df_info " ""$0" commit
}

df_install() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Install: "$pkg"
 done
 lowlevel_${df_platform}_install "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_uninstall() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Uninstall: "$pkg"
 done
 lowlevel_${df_platform}_uninstall "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_upgrade() {
 df_trans_log_date
 for pkg in "$@"; do
  df_trans_log " "Upgrade: "$pkg"
 done
 lowlevel_{$df_platform}_upgrade "$@" >> "$df_trans_file"
 df_commit_reminder
}

df_fullupgrade() {
 df_trans_log_date
 df_trans_log " "FullyUpgrade: \*
 lowlevel_${df_platform}_fullupgrade >> "$df_trans_file"
 df_commit_reminder
}

###

df_trans_dir_init() {
 if test ! -d "$df_trans_dir"; then
  mkdir -p "$df_trans_dir"
  df_info Creating directory "$df_trans_dir"
 fi
}

df_tid_init() {
 df_trans_dir_init
 if test ! -f "$df_tid_file"; then
  echo 1 > "$df_tid_file"
 fi
}

df_get_tid() {
 cat "$df_tid_file"
}

df_new_tid() {
 df_tid=$(($df_tid+1))
 echo $df_tid > "$df_tid_file"
}

###

df_trans_init() {
 df_trans_dir_init
 if test ! -f "$df_trans_file"; then
  touch "$df_trans_file"
 fi
}

df_trans_prepare() {
 cd "$df_trans_dir"
 ### TODO: Locking needed here (and in many other places I bet)
 mv "$df_trans_file" ${df_tid}.trans
 df_trans_file="$df_trans_dir/$df_tid.trans"
 mv "$df_trans_log_file" ${df_tid}.log
 df_trans_log_file="$df_trans_dir/$df_tid.log"
}

df_trans_begin() {
 true ### TODO: Clone filesystem / Make snapshot / etc (maybe separate func)
}

df_trans_stat() {
 echo $1 > "$df_trans_dir"/${df_tid}.stat
}

df_trans_cleanup() {
 true
}

df_trans_end_ok() {
 ### TODO: Promote clone / Remove snapshot / etc
 df_trans_stat  ok
 df_new_tid
}

df_trans_end_fail() {
 ### TODO: Remove clone / Rollback to snapshot / etc
 df_trans_stat fail
 df_new_tid
}

df_commit() {
 df_trans_begin
 df_log_date
 df_log Beginning: Transaction $df_tid
 df_trans_prepare
 sh -ex "$df_trans_file"
 if test $? -ne 0; then
  df_warn Part\(s\) of transaction $df_tid failed. Intent log follows:
  cat "$df_trans_log_file"
  df_log Failed: Transaction $df_tid
  df_trans_end_fail
 else
  df_trans_log_commit
  df_log Succeeded: Transaction $df_tid
  df_trans_end_ok
  df_info Transaction $df_tid succeeded
 fi
 df_trans_cleanup
}

df_cancel_trans() {
 df_trans_prepare
 df_trans_stat cancel
}

df_cancel() {
 df_info Cancelled transaction ${df_tid}. Intent log follows:
 cat "$df_trans_log_file"
 df_cancel_trans
 df_new_tid
}

df_cmd_finish() {
 if test $df_opt_immediate_commit -eq 1; then
  df_commit
 fi
}

###

df_opt_immediate_commit=0

###

df_platform="`df_get_platform`"

df_db_dir="$df_run_dir"/bsdpkg/
df_db_dir_init

df_ver_file="$df_db_dir"/last.ver
df_ver_file_init
df_ver_handler

df_log_file="$df_log_dir"/bsdpkg.log
df_log_init

df_trans_dir="$df_db_dir"/trans/

df_trans_file="$df_trans_dir"/next.trans
df_trans_init

df_trans_log_file="$df_trans_dir"/next.log
df_trans_log_init

df_tid_file="$df_trans_dir"/next.tid
df_tid_init
df_tid="`df_get_tid`"

###

while true; do
 case "$1" in
  -now|--now)
   df_opt_immediate_commit=1
   shift
   ;;

  ###

  add|install)
   shift
   df_install "$@"
   df_cmd_finish
   exit 
   ;;
  update|upgrade)
   df_warn DEBUG: argc=$# ### TODO
   if test $# -eq 1; then
    df_fullupgrade 
   else
    shift
    df_upgrade "$@"
   fi
   df_cmd_finish
   exit
   ;;
  remove|erase|delete|uninstall)
   shift
   df_uninstall "$@"
   df_cmd_finish
   exit
   ;;
  commit|run|execute)
   df_commit
   exit
   ;; 
  cancel)
   df_cancel
   exit
   ;;
  log|show-log|history|show-history)
   cat "$df_log_file"
   exit
   ;;
  trans|transaction|show-trans|show-transaction)
   df_warn DEBUG: argc=$# ### TODO
   if test $# -eq 1; then
    df_info Intent log of transaction ${df_tid} follows:
    cat "$df_trans_log_file"
   else
    df_info Intent log of transaction "$2" follows:
    cat "$df_trans_dir"/"$2.log"
   fi
   exit
   ;;
  help|--help|-?|get-help)
   echo              "$0" $df_ver usage:
   echo      
   echo To upgrade the system or packages:
   echo " ""$0" upgrade [PACKAGE1 PACKAGE2 ...]
   echo To install packages and their dependencies:
   echo " ""$0" install PACKAGE1 [PACKAGE2 ...]
   echo To uninstall packages, their no-longer-needed dependencies \(where 
   echo "    "supported\), and packages that depend on them:
   echo " ""$0" uninstall PACKAGE1 [PACKAGE2 ...]
   echo
   echo NOTE: You have to actually run the transaction for the operations to 
   echo "    "be done:
   echo " ""$0" commit
   echo To cancel a transaction:
   echo " ""$0" cancel
   echo To show the intents of the current transaction:
   echo " ""$0" show-trans
   echo
   echo For immediate operations you can use the -now option:
   echo " ""$0" -now install PACKAGE1 [PACKAGE2 ...]
   echo
   exit
   ;;
  platf|platform|get-platform)
   echo "$df_platform"
   exit
   ;;
  version|--version|get-version)
   echo $df_ver
   exit
   ;;
  -*)
   df_warn Unknown option: "$1"
   exit 1
   ;;
  *)
   df_warn Unknown command: "$1"
   exit 1
   ;;
 esac
done

exit 2

